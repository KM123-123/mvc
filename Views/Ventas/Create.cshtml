@model mvc.Models.Ventas

@{
    ViewData["Title"] = "Crear Venta";
}

<h1>Crear Venta</h1>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["ModelErrors"] != null)
{
    <div class="alert alert-danger">
        <strong>Errores de validación:</strong>
        <p>@TempData["ModelErrors"]</p>
    </div>
}
@if (TempData["Exception"] != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @TempData["Exception"]
    </div>
}

<form asp-action="Create" method="post">
    <div class="form-group mb-3">
        <label asp-for="ClienteID" class="control-label"></label>
        <select asp-for="ClienteID" class="form-control" asp-items="ViewBag.ClienteID" id="clienteSelect">
            <option value="">-- Seleccionar Cliente --</option>
        </select>
        <span asp-validation-for="ClienteID" class="text-danger"></span>
    </div>

    <div id="clienteInfo" style="margin-top:10px; display:none;">
        <strong>Detalles del cliente:</strong>
        <p><b>ID:</b> <span id="cliId"></span></p>
        <p><b>NIT:</b> <span id="cliNit"></span></p>
        <p><b>Nombre:</b> <span id="cliNombre"></span></p>
    </div>

    <div class="form-group mb-3">
        <label for="ProductoID" class="control-label">Producto</label>
        <select name="ProductoID" id="productoSelect" class="form-control" asp-items="ViewBag.ProductoID">
            <option value="">-- Seleccionar Producto --</option>
        </select>
    </div>

    <div id="productoInfo" style="margin-top:10px; display:none;">
        <strong>Detalles del producto:</strong>
        <p><b>ID:</b> <span id="prodId"></span></p>
        <p><b>Código:</b> <span id="prodCodigo"></span></p>
        <p><b>Descripción:</b> <span id="prodNombre"></span></p>
        <p><b>Precio Unitario:</b> Q<span id="prodPrecio"></span></p>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Cantidad" class="control-label"></label>
        <input asp-for="Cantidad" class="form-control" id="cantidadInput" />
        <span asp-validation-for="Cantidad" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Total" class="control-label">Total</label>
        <input asp-for="Total" class="form-control" readonly />
        <span asp-validation-for="Total" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label>Fecha de la Venta</label>
        <input class="form-control" type="text" readonly
               value="@(ViewBag.FechaVenta != null
                        ? ((DateTime)ViewBag.FechaVenta).ToString("dd/MM/yyyy hh:mm tt")
                        : DateTime.Now.ToString("dd/MM/yyyy hh:mm tt"))" />
    </div>

    <div class="form-group mb-3">
        <label>Usuario (Vendedor)</label>
        <input class="form-control" type="text" readonly value="@ViewBag.UsuarioNombre" />
    </div>

    <div class="form-group">
        <input type="submit" value="Crear" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Volver</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Inicializa Select2 en ambos dropdowns
            $('#clienteSelect').select2({
                placeholder: "-- Seleccionar Cliente --",
                allowClear: true
            });
            $('#productoSelect').select2({
                placeholder: "-- Seleccionar Producto --",
                allowClear: true
            });

            // Serializa los datos desde el ViewBag (igual que antes)
            const clientes = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Clientes ?? new List<mvc.Models.Clientes>()));
            const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Productos ?? new List<mvc.Models.Productos>()));

            // Referencias a los inputs (usando jQuery)
            const cantidadInput = $("#cantidadInput");
            const totalInput = $("input[name='Total']");
            let precioUnitario = 0;

            // Evento cuando se SELECCIONA un cliente
            $('#clienteSelect').on('select2:select', function (e) {
                const clienteId = e.params.data.id;
                const cliente = clientes.find(c => c.ClienteID == clienteId);
                if (cliente) {
                    $('#clienteInfo').show();
                    $("#cliId").text(cliente.ClienteID);
                    $("#cliNit").text(cliente.Nit);
                    $("#cliNombre").text(cliente.NombreCliente);
                }
            });

            // Evento cuando se DESELECCIONA un cliente (se limpia)
            $('#clienteSelect').on('select2:unselect', function (e) {
                $('#clienteInfo').hide();
            });

            // Evento cuando se SELECCIONA un producto
            $('#productoSelect').on('select2:select', function (e) {
                const productoId = e.params.data.id;
                const producto = productos.find(p => p.ProductoID == productoId);
                if (producto) {
                    $('#productoInfo').show();
                    $("#prodId").text(producto.ProductoID);
                    $("#prodCodigo").text(producto.CodigoProducto);
                    $("#prodNombre").text(producto.NombreProducto);
                    $("#prodPrecio").text(producto.PrecioUnitario.toFixed(2));
                    precioUnitario = producto.PrecioUnitario;
                    calcularTotal();
                }
            });

            // Evento cuando se DESELECCIONA un producto
            $('#productoSelect').on('select2:unselect', function (e) {
                $('#productoInfo').hide();
                precioUnitario = 0;
                calcularTotal();
            });

            // Calcular total al cambiar la cantidad
            cantidadInput.on("input", calcularTotal);

            function calcularTotal() {
                const cantidad = parseFloat(cantidadInput.val()) || 0;
                const total = cantidad * precioUnitario;
                totalInput.val(total.toFixed(2));
            }
        });
    </script>
}